var Timer timer_alarm_activated = null
var Timer timer_alarm_sirena_on = null
var Timer timer_alarm_sirena_off = null
var Timer timer_motion = null

var gl_camera_state = null

rule "Initializing phase"
when
	System started
then
	say("добро пожаловать в умный дом")
	sendTelegram("smart_home_bot", "Добро пожаловать в умный дом!")
	sendCommand(mqtt_pub_esp0, "init")
	//logError("log", "Hello World\n")
end

rule "Foscam Motion"
when
	Item FoscamMotion received update
then
	var camera_state = FoscamMotion.state.toString
	
	if(gl_camera_state != camera_state)
	{
		gl_camera_state = camera_state

		if(camera_state == "1") // silent
		{
			if(setting_mode_motion.state.toString == "ON")
			{
				if(timer_motion==null) timer_motion = createTimer(now.plusSeconds(10))
				[|
					timer_motion = null
					sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"state\": \"OFF\"}")
					sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"state\": \"OFF\"}")
				]
				else timer_motion.reschedule(now.plusSeconds(10))
			}
		}
		if(camera_state == "2") // movement
		{
			if(setting_mode_motion.state.toString == "ON")
			{
				if(timer_motion != null)
				{
					timer_motion.cancel
					timer_motion = null
				}
				
				sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"state\": \"ON\"}")
				sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"state\": \"ON\"}")
			}
			
			if(setting_mode_alarm.state.toString == "ON")
			{
				if(timer_alarm_activated == null)
				{
					sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"panic\"}")
					sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"panic\"}")

					if(timer_alarm_sirena_on==null) timer_alarm_sirena_on = createTimer(now.plusSeconds(10))
					[|
						sendTelegram("smart_home_bot", "Бандит в квартире :(")
						sendCommand(mqtt_pub_esp0, "{\"relay\": 0, \"state\": \"ON\"}")
					]
					
					if(timer_alarm_sirena_off==null) timer_alarm_sirena_off = createTimer(now.plusSeconds(60))
					[|
						sendCommand(setting_mode_alarm, OFF)
					]
					else timer_alarm_sirena_off.reschedule(now.plusSeconds(60))
				}
			}
		}
	}
end

rule "MQTT sub esp0"
when
	Item mqtt_sub_esp0 received update
then
	var json = mqtt_sub_esp0.state.toString
	
	var id = transform("JSONPATH","$.bt_relay",json)
	var state = transform("JSONPATH","$.state",json)
	var led = transform("JSONPATH","$.led",json)
		
	var mode_current = transform("JSONPATH","$.mode_current",json)
	var mode_requested = transform("JSONPATH","$.mode_requested",json)
	var mqtt_reason = transform("JSONPATH","$.mqtt_reason",json)
	
	if(json == "init")
	{
		postUpdate(setting_mode_motion_vis, ON)
		postUpdate(setting_mode_sos_vis, ON)

		postUpdate(setting_mode_alarm, OFF)
		postUpdate(setting_mode_motion, OFF)
		postUpdate(setting_mode_sos, OFF)
	}
	
	if(id != null)  postUpdate("hall_light_luster_"+id, state)
	if(led != null) postUpdate("setting_led", led)	
	
	switch mode_current
	{
		case "normal":
			switch mode_requested
			{
				case "alarm":
					if(mqtt_reason == "event") sendCommand(setting_mode_alarm, ON)
			}
		case "motion":
			switch mode_requested
			{
				case "normal":
					if(mqtt_reason == "event") sendCommand(setting_mode_motion, OFF)
			}			
		case "sos":
			switch mode_requested
			{
				case "normal":
					if(mqtt_reason == "event") sendCommand(setting_mode_sos, OFF)
			}
		case "alarm":
			switch mode_requested
			{
				case "normal":
					if(mqtt_reason == "event") sendCommand(setting_mode_alarm, OFF)
			}
		case "panic":
			switch mode_requested
			{
				case "normal":
					if(mqtt_reason == "event") sendCommand(setting_mode_alarm, OFF)
			}
	}
end

rule "setting_mode_alarm"
when
	Item setting_mode_alarm received command
then
	if(receivedCommand == ON)
	{
		postUpdate(setting_mode_motion, OFF)
		postUpdate(setting_mode_sos, OFF)
		postUpdate(setting_mode_motion_vis, OFF)
		postUpdate(setting_mode_sos_vis, OFF)
		
		if(timer_motion != null)
		{
			timer_motion.cancel
			timer_motion = null
		}

		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"alarm\"}")
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"alarm\"}")
		
		say("сигнализация включена")
		sendTelegram("smart_home_bot", "Cигнализация включена!")
		
		if(timer_alarm_activated==null) timer_alarm_activated = createTimer(now.plusSeconds(10)) 
		[|
			timer_alarm_activated = null
			say("дом под охраной")
			sendTelegram("smart_home_bot", "Дом под охраной :)")
		]
	}
	else
	{
		postUpdate(setting_mode_motion_vis, ON)
		postUpdate(setting_mode_sos_vis, ON)
		
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}")
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}")
		sendCommand(mqtt_pub_esp0, "{\"relay\": 0, \"state\": \"OFF\"}")

		if(timer_alarm_activated != null)
		{
			timer_alarm_activated.cancel
			timer_alarm_activated = null
		}
		
		if(timer_alarm_sirena_on != null)
		{
			timer_alarm_sirena_on.cancel
			timer_alarm_sirena_on = null
		}
		
		if(timer_alarm_sirena_off != null)
		{
			timer_alarm_sirena_off.cancel
			timer_alarm_sirena_off = null
		}
		
		say("сигнализация выключена")
		sendTelegram("smart_home_bot", "Cигнализация выключена!")
	}
end

rule "setting_mode_motion"
when
	Item setting_mode_motion received command
then
	postUpdate(setting_mode_sos, OFF)

	if(receivedCommand == ON)
	{
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"motion\"}")
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"motion\"}")
	}
	else
	{
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}")
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}")
		
		if(timer_motion != null)
		{
			timer_motion.cancel
			timer_motion = null
		}
	}
end

rule "setting_mode_sos"
when
	Item setting_mode_sos received command
then
	if(receivedCommand == ON)
	{
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"sos\"}")
		sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"sos\"}")
	}
	else
	{
		if(setting_mode_motion.state.toString == "ON")
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"motion\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"motion\"}")
		}
		else
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}")
		}
	}
end

rule "VoiceCommand"
when
	Item VoiceCommand received command
then
	var command = VoiceCommand.state.toString.toLowerCase
	var String item = null
	var String state = null
	var String answer_beg = null
	var String answer = null

	// ON/OFF 
	if(command.contains("вкл"))
	{
		state = "ON"
		answer_beg = "включаю"
	}
	else if(command.contains("выкл"))
	{
		state = "OFF"
		answer_beg = "выключаю"
	}

	// What
	if(command.contains("свет"))
	{
		item = "hall_light_all"
		answer = "свет"
	}

	if(answer == null)
	{
		say("неизвестная команда")
	}
	else
	{
		say(answer_beg + answer)
		sendCommand(item, state)
	}
end
