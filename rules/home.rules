var Timer timer_voice = null
var oh_init = false
//val old_state_esp0 = newArrayList(null, null)

rule "Initializing phase"
when
	System started
then
	say("добро пожаловать в умный дом")
	sendTelegram("smart_home_bot", "Добро пожаловать в умный дом.")

	postUpdate(setting_voice, ON)
//	postUpdate(setting_mode_alarm, OFF)
//	postUpdate(setting_mode_sos, OFF)
	sendCommand(mqtt_pub_esp0, "status")
end

rule "MQTT sub esp0"
when
	Item mqtt_sub_esp0 received update
then
	var json = mqtt_sub_esp0.state.toString
	
	var id = transform("JSONPATH","$.bt_relay",json)
	var state = transform("JSONPATH","$.state",json)
	var mode_current = transform("JSONPATH","$.mode_current",json)
	var mode_requested = transform("JSONPATH","$.mode_requested",json)
	var mqtt_reason = transform("JSONPATH","$.mqtt_reason",json)
	
	var led = transform("JSONPATH","$.led",json)
	
	switch mode_current
	{
		case "normal":
			switch mode_requested
			{
				case "normal":
				{
					if(setting_mode_sos.state.toString == "ON")
					{
						sendCommand(setting_mode_sos, ON)
						sendCommand(setting_mode_alarm, OFF)
					}
					else if(setting_mode_alarm.state.toString == "ON")
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, ON)
					}
					else
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, OFF)
					}
				}
				case "alarm":
					if((mqtt_reason == "event") || (oh_init == false))
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, ON)
					}
			}
		case "sos":
			switch mode_requested
			{
				case "normal":
					if((mqtt_reason == "event") || (oh_init == false))
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, OFF)
					}
				case "sos":
					{
						sendCommand(setting_mode_sos, ON)
						sendCommand(setting_mode_alarm, OFF)
					}
			}
		case "alarm":
			switch mode_requested
			{
				case "normal":
					if((mqtt_reason == "event") || (oh_init == false))
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, OFF)
					}
				case "alarm":
				{
					if((mqtt_reason == "event"))
					{
						sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"panic\"}")
						sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"panic\"}")
						sendTelegram("smart_home_bot", "Тревога! Посторонний в квартире.")
						if(timer_voice==null) timer_voice = createTimer(now.plusSeconds(3)) [ | playSound("panic.mp3")]
						else timer_voice.reschedule(now.plusSeconds(3))
					}
					else
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, ON)
					}
				}
			}
		case "panic":
			switch mode_requested
			{
				case "normal":
					if((mqtt_reason == "event") || (oh_init == false))
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, OFF)
					}
				case "panic":
				{
					if((mqtt_reason == "event"))
					{
						sendTelegram("smart_home_bot", "Тревога! Нажат выключатель в зале.")
					}
					else if(oh_init == false)
					{
						sendCommand(setting_mode_sos, OFF)
						sendCommand(setting_mode_alarm, ON)
					}
				}
			}
	}
	
	/* update Bulb status */
	if(id != null)
	{
		postUpdate("hall_light_luster_"+id, state)
		oh_init = true
	}
	
	/* update ESP led status */
	if(led != null) postUpdate("setting_hall_led", led)
	
	//logError("log", "hello world\n")
end

rule "setting_mode_alarm"
when
	Item setting_mode_alarm received command
then
	if(setting_mode_alarm.state.toString != receivedCommand)
	{
		if(receivedCommand == ON)
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"alarm\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"alarm\"}")
			
			if(setting_voice.state.toString == "ON") say("сигнализация включена")
			sendTelegram("smart_home_bot", "Cигнализация включена.")
		}
		else
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}")
			if(timer_voice!=null) timer_voice.cancel timer_voice = null
			
			if(setting_voice.state.toString == "ON") say("сигнализация выключена")
			sendTelegram("smart_home_bot", "Cигнализация выключена.")
		}
	}
end

rule "setting_mode_sos"
when
	Item setting_mode_sos received command
then

	if(setting_mode_sos.state.toString != receivedCommand)
	{
		if(receivedCommand == ON)
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"sos\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"sos\"}")
			
			if(setting_voice.state.toString == "ON") say("режим сос включен")
		}
		else
		{
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}")
			
			if(setting_voice.state.toString == "ON") say("режим сос выключен")
		}
	}
end

rule "setting_voice"
when
	Item setting_voice received command
then
	if(receivedCommand == ON) say("голосовая функция включена")
	else say("голосовая функция выключена")
end

rule "VoiceCommand"
when
	Item VoiceCommand received command
then
	var command = VoiceCommand.state.toString.toLowerCase
	var String item = null
	var String state = null
	var String answer_beg = null
	var String answer = null

	// ON/OFF 
	if(command.contains("вкл"))
	{
		state = "ON"
		answer_beg = "включаю"
	}
	else if(command.contains("выкл"))
	{
		state = "OFF"
		answer_beg = "выключаю"
	}

	// Where
	if(command.contains("зал") && state != null)
	{
		item = "hall_"
	
		// What
		if(command.contains("свет"))
		{
			item += "light_"

			if(command.contains("бра"))
			{
				// TODO
			}
			else if(command.contains("весь"))
			{
				item += "all"
				answer = "свет в зале"
			}
			else if(command.contains("холод"))
			{
				item += "luster_0"
				answer = "холодный свет в зале"
			}
			else if(command.contains("тепл"))
			{
				item += "luster_1"
				answer = "теплый свет в зале"
			}
			else 
			{
				item += "all"
				answer = "свет в зале"
			}
		}
		else if(command.contains("подсвет"))
		{
			// TODO
		}
	}
	else if(command.contains("спал") && state != null)
	{
		// TODO
	}

	if(answer == null)
	{
		if(setting_voice.state.toString == "ON") say("неизвестная команда")
	}
	else
	{
		if(setting_voice.state.toString == "ON") say(answer_beg + " " + answer)
		sendCommand(item, state)
	}
end


