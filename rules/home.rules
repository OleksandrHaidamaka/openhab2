var panic_flag = false

rule "Initialize light states"
when
	System started
then
	say("Добро пожаловать в умный дом.")
	sendTelegram("smart_home_bot", "Добро пожаловать в умный дом.")

	postUpdate(setting_alarm, OFF)
	postUpdate(setting_voice, OFF)
	
	sendCommand(mqtt_pub_esp0, "status") Thread::sleep(250)
	
end

rule "MQTT sub esp0"
when
	Item mqtt_sub_esp0 received update
then
	var json = mqtt_sub_esp0.state.toString
	
	var id = transform("JSONPATH","$.bt_relay",json)
	var state = transform("JSONPATH","$.state",json)
	
	/* update ESP led status */
	var dim = transform("JSONPATH","$.led",json)
	if(dim != null) postUpdate("setting_led", dim)	
	
	if(setting_alarm.state.toString == "ON")
	{
		if(panic_flag == false)
		{
			panic_flag = true
			say("Немедленно покиньте квартиру")
			sendTelegram("smart_home_bot", "Тревога. Посторонний в квартире!")
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"alarm\"}") Thread::sleep(250)
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"alarm\"}") Thread::sleep(250)
		}
		else
		{
			if((id != null) && (state != null))
			{
				panic_flag = false
				sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}") Thread::sleep(250)
				sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}") Thread::sleep(250)
				sendCommand(mqtt_pub_esp0, "status") Thread::sleep(250)
			}
		}
	}
	else
	{
		/* update light statuses */
		if((id != null) && (state != null)) postUpdate("hall_light_luster_"+id, state)
	}
end

rule "Setting_alarm"
when
	Item setting_alarm received command
then
	if(receivedCommand == ON)
	{
		if(setting_voice.state.toString == "ON") say("сигнализация включена")
	}
	else
	{ 
		if(panic_flag == true)
		{
			panic_flag = false
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 0, \"mode\": \"normal\"}") Thread::sleep(250)
			sendCommand(mqtt_pub_esp0, "{\"bt_relay\": 1, \"mode\": \"normal\"}") Thread::sleep(250)
			sendCommand(mqtt_pub_esp0, "status") Thread::sleep(250)
		}
		if(setting_voice.state.toString == "ON") say("сигнализация выключена")
	}
end

rule "Setting_voice"
when
	Item setting_voice received command
then
	if(receivedCommand == ON) say("голосовая функция включена")
	else say("голосовая функция выключена")
end

rule "Voice control"
when
	Item VoiceCommand received command
then
	var command = VoiceCommand.state.toString.toLowerCase
	var String item = null
	var String state = null
	var String answer_beg = null
	var String answer = null

	// ON/OFF 
	if(command.contains("вкл"))
	{
		state = "ON"
		answer_beg = "включаю"
	}
	else if(command.contains("выкл"))
	{
		state = "OFF"
		answer_beg = "выключаю"
	}

	// Where
	if(command.contains("зал") && state != null)
	{
		item = "hall_"
	
		// What
		if(command.contains("свет"))
		{
			item += "light_"

			if(command.contains("бра"))
			{
				// TODO
			}
			else if(command.contains("весь"))
			{
				item += "all"
				answer = "весь свет в зале"
			}
			else if(command.contains("холод"))
			{
				item += "luster_0"
				answer = "холодный свет в зале"
			}
			else if(command.contains("тепл"))
			{
				item += "luster_1"
				answer = "теплый свет в зале"
			}
			else 
			{
				item += "luster_all"
				answer = "свет в зале"
			}
		}
		else if(command.contains("подсвет"))
		{
			// TODO
		}
	}
	else if(command.contains("спал") && state != null)
	{
		// TODO
	}

	if(answer == null)
	{
		if(setting_voice.state.toString == "ON") say("неизвестная команда")
	}
	else
	{
		if(setting_voice.state.toString == "ON") say(answer_beg + " " + answer)
		sendCommand(item, state)
	}
end


